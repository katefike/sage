- hosts: localhost
  vars:
    digital_ocean_token: '{{ lookup("env", "DO_API_TOKEN") }}'
    ssh_public_key: '{{ lookup("env", "PROD_SSH_PUBLIC_KEY") }}'
    ssh_allowed_public_ips: '{{ lookup("env", "SSH_ALLOWED_PUBLIC_IPS") }}'
    ssh_allowed_public_ips_list: '{{ ssh_allowed_public_ips.split(", ") }}'
    droplet_size: s-1vcpu-1gb
    droplet_region: nyc1
    droplet_image: ubuntu-22-04-x64
  tasks:
    - name: Add public ssh key named "sageProd" to your Digital Ocean account
      digital_ocean_sshkey:
        name: "sageProd"
        oauth_token: "{{ digital_ocean_token }}"
        ssh_pub_key: "{{ ssh_public_key }}"
        state: present
      register: sshkey_result

    - name: Create a new Droplet named "sageProd"
      digital_ocean_droplet:
        name: "sageProd"
        oauth_token: "{{ digital_ocean_token }}"
        size: "{{ droplet_size }}"
        region: "{{ droplet_region }}"
        image: "{{ droplet_image }}"
        wait_timeout: 600
        unique_name: yes
        ssh_keys: ["{{ sshkey_result.data.ssh_key.fingerprint }}"]
        state: present
      with_inventory_hostnames:
        - sageProd
      register: droplet_result

    - name: Setting host fact public_ip
      ansible.builtin.set_fact: public_ip="{{ droplet_result.results[0].data.droplet.networks.v4[0].ip_address }}"

    - name: Create firewall named "sageProd" and assign the droplet named "sageProd" to it
      uri:
        url: "https://api.digitalocean.com/v2/firewalls"
        method: POST
        body_format: json
        headers:
          Content-Type: application/json
          Authorization: "Bearer {{ digital_ocean_token }}"
        body:
          name: "sageProd"
          inbound_rules:
            - protocol: "icmp"
              sources:
                addresses: ["0.0.0.0/0"]
            - protocol: "tcp"
              ports: "22"
              sources:
                addresses: "{{ ssh_allowed_public_ips_list }}"
            - protocol: "tcp"
              ports: "80"
              sources:
                addresses: "{{ ssh_allowed_public_ips_list }}"
            - protocol: "tcp"
              ports: "587"
              sources:
                addresses: "{{ ssh_allowed_public_ips_list }}"
          outbound_rules: 
            - protocol: "icmp"
              destinations:
                addresses: ["0.0.0.0/0"]
            - protocol: "tcp"
              ports: "all"
              destinations:
                addresses: ["0.0.0.0/0"]
            - protocol: 'udp'
              ports: '53'
              destinations:
                addresses: ['0.0.0.0/0']
          droplet_ids: ["{{ droplet_result.results[0].data.droplet.id }}"]
        status_code: 202
      register: firewall_result

    # - name: Create a reserved IP and assign a droplet to it
    #   digital_ocean_floating_ip:
    #     oauth_token: "{{ digital_ocean_token }}  "
    #     droplet_id: "{{ droplet_result.results[0].data.droplet.id }}"
    #     state: present
    #   register: floating_ip_result

    - name: Save IP and host name to droplet_hosts file
      become: yes
      lineinfile:
        path: "{{  playbook_dir  }}/droplet_hosts"
        regexp: ".*sageProd$"
        line: "sageProd ansible_host={{ public_ip }}"
        # The public IP is needed to SSH to the droplet; the floating IP is different
        # The floating IP could be accessed if needed using the line below:
        # {{ floating_ip_result.data.floating_ip.ip }}

    - name: Refresh inventory to ensure the new host exist in inventory
      ansible.builtin.meta: refresh_inventory