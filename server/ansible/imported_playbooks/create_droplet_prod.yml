- hosts: localhost
  vars:
    digital_ocean_token: '{{ lookup("env", "DO_API_TOKEN") }}'
    prod_name: '{{ lookup("env", "PROD_NAME") }}'
    prod_ssh_key_pub: '{{ lookup("env", "PROD_SSH_KEY_PUB") }}'
    ssh_allowed_public_ips: '{{ lookup("env", "SSH_ALLOWED_PUBLIC_IPS") }}'
    ssh_allowed_public_ips_list: '{{ ssh_allowed_public_ips.split(", ") }}'
    droplet_size: s-1vcpu-1gb
    droplet_region: nyc1
    droplet_image: ubuntu-22-04-x64
  tasks:
    - name: Add public ssh key named "sageProd" to your Digital Ocean account
      digital_ocean_sshkey:
        name: "sageProd"
        oauth_token: "{{ digital_ocean_token }}"
        ssh_pub_key: "{{ prod_ssh_key_pub }}"
        state: present
      register: sshkey_result

    - name: Create a new Droplet named "sageProd"
      digital_ocean_droplet:
        name: "sageProd"
        oauth_token: "{{ digital_ocean_token }}"
        size: "{{ droplet_size }}"
        region: "{{ droplet_region }}"
        image: "{{ droplet_image }}"
        wait_timeout: 600
        unique_name: yes
        ssh_keys: ["{{ sshkey_result.data.ssh_key.fingerprint }}"]
        state: present
      with_inventory_hostnames:
        - web
      register: droplet_result

    - name: Create firewall named "sageProd" and assign the droplet named "sageProd" to it
      uri:
        url: "https://api.digitalocean.com/v2/firewalls"
        method: POST
        body_format: json
        headers:
          Content-Type: application/json
          Authorization: "Bearer {{ digital_ocean_token }}"
        body:
          name: "sageProd"
          inbound_rules:
            - protocol: "icmp"
              sources:
                addresses: ["0.0.0.0/0"]
            - protocol: "tcp"
              ports: "22"
              sources:
                addresses: "{{ ssh_allowed_public_ips_list }}"
          droplet_ids: ["{{ droplet_result.results[0].data.droplet.id }}"]
        status_code: 202
      register: firewall_result

    - name: Create a reserved IP and assign a droplet to it
      digital_ocean_floating_ip:
        oauth_token: "{{ digital_ocean_token }}  "
        droplet_id: "{{ droplet_result.results[0].data.droplet.id }}"
        state: present
      register: floating_ip_result

    - name: Save IP and host name to droplet_hosts
      become: yes
      lineinfile:
        path: "{{  playbook_dir  }}/droplet_hosts"
        regexp: ".*{{ item.data.droplet.name }}$"
        # Floating IP: {{ floating_ip_result.data.floating_ip.ip }}
        line: "{{ item.data.droplet.networks.v4[0].ip_address }}  {{ item.data.droplet.name }}"
      with_items: "{{ droplet_result.results }}"